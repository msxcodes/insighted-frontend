import { Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer";

const styles = StyleSheet.create({
    page: {
        padding: 40,
        backgroundColor: '#fff',
        fontFamily: 'Helvetica'
    },
    header: {
        marginBottom: 30,
    },
    title: {
        fontSize: 24,
        fontWeight: "bold",
        marginBottom: 10,
        textAlign: 'center',
        color: '#1e293b'
    },
    subtitle: {
        fontSize: 12,
        textAlign: 'center',
        color: '#64748b',
        marginBottom: 20
    },
    divider: {
        borderBottom: 1,
        borderBottomColor: '#e2e8f0',
        marginBottom: 20
    },
    section: {
        marginBottom: 15
    },
    mainHeading: {
        fontSize: 16,
        fontWeight: "bold",
        marginBottom: 8,
        color: '#0284c7', // cyan-600
        paddingBottom: 4,
        borderBottom: 1,
        borderBottomColor: '#e2e8f0'
    },
    subHeading: {
        fontSize: 14,
        fontWeight: "bold",
        marginBottom: 6,
        marginTop: 10,
        color: '#0f766e' // teal-700
    },
    bulletPoint: {
        flexDirection: 'row',
        marginBottom: 4,
        paddingLeft: 15
    },
    bullet: {
        width: 10,
        fontSize: 12,
        color: '#475569'
    },
    bulletText: {
        flex: 1,
        fontSize: 12,
        lineHeight: 1.6,
        color: '#334155'
    },
    nestedBulletPoint: {
        flexDirection: 'row',
        marginBottom: 4,
        paddingLeft: 30
    },
    footer: {
        position: 'absolute',
        bottom: 30,
        left: 40,
        right: 40,
        textAlign: 'center',
        color: '#94a3b8',
        fontSize: 10,
        borderTop: 1,
        borderTopColor: '#e2e8f0',
        paddingTop: 10
    }
});

const NotesPDF = ({ notes, title = "Lecture Notes", timestamp = new Date().toLocaleDateString() }: { notes: string, title?: string, timestamp?: string }) => {
    return (
        <Document>
            <Page size="A4" style={styles.page}>
                {/* Header */}
                <View style={styles.header}>
                    <Text style={styles.title}>{title}</Text>
                    <Text style={styles.subtitle}>Generated on {timestamp}</Text>
                    <View style={styles.divider} />
                </View>

                {/* Content */}
                {notes.split('\n').map((line: string, index: number) => {
                    // Main heading (starts with "- **" and ends with ":**")
                    if (line.match(/^-\s+\*\*.*:\*\*/)) {
                        const heading = line.replace(/^-\s+\*\*|\:\*\*$/g, '').trim();
                        return (
                            <View key={index} style={styles.section}>
                                <Text style={styles.mainHeading}>{heading}</Text>
                            </View>
                        );
                    }
                    // Sub heading (starts with "- **" but doesn't end with ":**")
                    else if (line.match(/^-\s+\*\*.+\*\*/)) {
                        const subheading = line.replace(/^-\s+\*\*|\*\*$/g, '').trim();
                        return (
                            <Text key={index} style={styles.subHeading}>{subheading}</Text>
                        );
                    }
                    // Nested bullet points (starts with multiple spaces/tabs and -)
                    else if (line.match(/^\s+-/)) {
                        const text = line.replace(/^\s+-\s+/, '').trim();
                        return (
                            <View key={index} style={styles.nestedBulletPoint}>
                                <Text style={styles.bullet}>•</Text>
                                <Text style={styles.bulletText}>{text}</Text>
                            </View>
                        );
                    }
                    // Regular bullet points
                    else if (line.startsWith('-')) {
                        const text = line.replace(/^-\s+/, '').trim();
                        return (
                            <View key={index} style={styles.bulletPoint}>
                                <Text style={styles.bullet}>•</Text>
                                <Text style={styles.bulletText}>{text}</Text>
                            </View>
                        );
                    }
                    return null;
                })}

                {/* Footer */}
                <Text style={styles.footer}>
                    Generated by InsightED • Page 1 of 1
                </Text>
            </Page>
        </Document>
    );
};

export default NotesPDF;

// Usage example:
/*
<PDFDownloadLink document={<NotesPDF notes={notesContent} title="API Overview" />} fileName="lecture-notes.pdf">
    {({ loading }) => (loading ? 'Loading document...' : 'Download PDF')}
</PDFDownloadLink>
*/
